# -*- coding: utf-8 -*-
"""fastapi_prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSxWq8QUQ6dpsmLhhgg54021znNK3Lhv
"""

import pickle
import pandas as pd
from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel
from typing import List

app = FastAPI()

with open("model_weights_scaler.pickle", "rb") as f:
    model_data = pickle.load(f)

model = model_data["model"]
scaler = model_data["scaler"]
columns = model_data["columns"]

class Item(BaseModel):
    name: str
    year: int
    selling_price: int
    km_driven: int
    fuel: str
    seller_type: str
    transmission: str
    owner: str
    mileage: str
    engine: str
    max_power: str
    torque: str
    seats: float

class Items(BaseModel):
    objects: List[Item]

def preprocess_data(data):
    data = data[columns]
    data['mileage'] = data['mileage'].str.extract(r'([\d.]+)').astype(float)
    data['engine'] = data['engine'].str.extract(r'([\d.]+)').astype(float)
    data['max_power'] = data['max_power'].str.extract(r'([\d.]+)').astype(float)
    data['seats'] = data['seats'].astype(float)

    # Не смог считать и заполнить медианы из Pd.Series, поэтому так:
    mileage = 19.37
    engine = 1248.00
    max_power = 81.86
    seats = 5.00

    data.mileage.fillna(mileage, inplace=True)
    data.engine.fillna(engine, inplace=True)
    data.max_power.fillna(max_power, inplace=True)
    data.seats.fillna(seats, inplace=True)

    data['engine'] = data['engine'].astype(int)
    data['seats'] = data['seats'].astype(int)
    return data

def preprocess_json(item: Item) -> pd.DataFrame:
    data = pd.DataFrame([item.dict()])
    data = preprocess_data(data)
    data = scaler.transform(data)
    return data

@app.get("/")
def read_root():
    return {"message": "Welcome to the Car Price Prediction API! Use /docs for API documentation."}

@app.post("/predict_item")
def predict_item(item: Item) -> dict:
    data = preprocess_json(item)
    prediction = model.predict(data)[0]
    return {"prediction": float(prediction)}

@app.post("/predict_items")
async def predict_items(file: UploadFile = File(...)) -> dict:
    data = pd.read_csv(file.file)
    data_pred = data.copy()
    data = preprocess_data(data)
    data = scaler.transform(data)
    data_pred["predicted_price"] = model.predict(data)

    result_file = "preds.csv"
    data_pred.to_csv(result_file, index=False)
    return {"file_saved": result_file}